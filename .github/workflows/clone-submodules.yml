name: 收集 CTF 资源

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  # 允许手动触发工作流
  workflow_dispatch:
  # 每周一自动运行
  schedule:
    - cron: "0 0 * * 1"

jobs:
  clone-repos:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: false

      - name: 配置 Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 创建目录结构
        run: |
          mkdir -p wiki
          mkdir -p writeups
          mkdir -p tools
          echo "已创建目录结构"

      - name: 从 README.md 提取并克隆子模块
        run: |
          # 定义处理仓库 URL 的函数
          process_repo() {
            local repo_url="$1"
            local target_dir="$2"
            
            # 清理 URL，移除空白字符
            repo_url=$(echo "$repo_url" | xargs)
            
            # 跳过空行
            if [ -z "$repo_url" ]; then
              return
            fi
            
            # 提取仓库名称
            if [[ "$repo_url" == *".git" ]]; then
              repo_name=$(basename "$repo_url" .git)
            else
              repo_name=$(basename "$repo_url")
            fi
            
            echo "正在处理仓库: $repo_name ($repo_url)"
            
            # 检查子模块是否已存在
            if [ -f ".gitmodules" ] && grep -q "$repo_url" .gitmodules; then
              echo "子模块 $repo_name 已存在，跳过"
              return
            fi
            
            # 检查目录是否已存在
            if [ -d "$target_dir/$repo_name" ]; then
              echo "目录 $target_dir/$repo_name 已存在，跳过"
              return
            fi
            
            # 添加子模块
            echo "添加子模块: $repo_name 到 $target_dir/"
            if git submodule add --depth=1 "$repo_url" "$target_dir/$repo_name"; then
              echo "✅ 成功添加子模块: $repo_name"
            else
              echo "❌ 添加子模块失败: $repo_name"
            fi
          }
          
          # 处理 Wiki 资源
          echo "=== 处理 Wiki 资源 ==="
          awk '/^## 1\. Wiki 资源$/,/^## / {if (/^https:\/\/github\.com/) print}' README.md | while read -r url; do
            process_repo "$url" "wiki"
          done
          
          # 处理 Writeups 资源
          echo "=== 处理 Writeups 资源 ==="
          awk '/^## 2\. Writeups 资源$/,/^## / {if (/^https:\/\/github\.com/) print}' README.md | while read -r url; do
            process_repo "$url" "writeups"
          done
          
          # 处理 Tools 工具
          echo "=== 处理 Tools 工具 ==="
          awk '/^## 3\. Tools 工具$/,/^$/ {if (/^https:\/\/github\.com/) print}' README.md | while read -r url; do
            process_repo "$url" "tools"
          done

      - name: 初始化和更新子模块
        run: |
          if [ -f ".gitmodules" ]; then
            echo "初始化子模块..."
            git submodule init
            echo "更新子模块..."
            git submodule update --depth=1
            echo "子模块状态:"
            git submodule status
          else
            echo "没有找到 .gitmodules 文件，可能没有成功添加任何子模块"
          fi

      - name: 提交更改
        run: |
          # 检查是否有更改需要提交
          if [ -n "$(git status --porcelain)" ]; then
            echo "检测到更改，准备提交..."
            git add .
            git commit -m "自动更新子模块 - $(date '+%Y-%m-%d %H:%M:%S')"
            echo "✅ 更改已提交"
          else
            echo "没有检测到更改，跳过提交"
          fi

      - name: 推送到远程仓库
        run: |
          # 检查是否有新的提交需要推送
          if [ -n "$(git log origin/$(git branch --show-current)..HEAD)" ] 2>/dev/null || ! git ls-remote --exit-code origin $(git branch --show-current) >/dev/null 2>&1; then
            echo "推送更改到远程仓库..."
            git push origin $(git branch --show-current)
            echo "✅ 更改已推送到远程仓库"
          else
            echo "没有新的提交需要推送"
          fi
